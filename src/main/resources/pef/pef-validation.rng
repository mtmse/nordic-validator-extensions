<?xml version="1.0" encoding="utf-8"?>
<grammar
        ns="http://www.daisy.org/ns/2008/pef"
        xmlns="http://relaxng.org/ns/structure/1.0"
        xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"
        xmlns:sch="http://www.ascc.net/xml/schematron"
        datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"
>
    <sch:title>PEF 2008 Schematron tests for TPB 2010-1 rules</sch:title>

    <sch:ns prefix="pef" uri="http://www.daisy.org/ns/2008/pef"/>
    <sch:ns prefix="dc" uri="http://purl.org/dc/elements/1.1/"/>
    <sch:ns prefix="gen" uri="http://daisymfc.svn.sourceforge.net/viewvc/daisymfc/trunk/dmfc/transformers/org_pef_dtbook2pef/"/>
    <sch:ns prefix="dotify" uri="http://www.daisy.org/ns/2015/dotify"/>
    <sch:ns prefix="ext" uri="http://www.tpb.se/pef/extensions/"/>

    <start>
        <ref name="element.any"/>
    </start>

    <define name="element.any">
        <element>
            <anyName>
                <except>
                    <name>row</name>
                </except>
            </anyName>
            <zeroOrMore>
                <choice>
                    <ref name="attribute.any"/>
                    <text/>
                    <ref name="element.any"/>
                    <ref name="element.row"/>
                </choice>
            </zeroOrMore>
        </element>
    </define>

    <define name="attribute.any">
        <attribute>
            <anyName></anyName>
        </attribute>
    </define>

    <define name="element.row">
        <element name="row">
            <zeroOrMore>
                <ref name="attribute.any"/>
            </zeroOrMore>
            <ref name="datatype.string.unicode.braille.sixdot"/>
        </element>
    </define>

    <define name="datatype.string.unicode.braille.sixdot">
        <data type="string">
            <param name="pattern">([&#x2800;-&#x283F;])*</param>
        </data>
    </define>

    <!-- Rule 1: Allowed namespaces -->
    <sch:pattern name="pef_TPB_1" id="pef_TPB_1">
        <sch:rule context="*">
            <sch:assert test="self::pef:* or self::dc:* or self::gen:* or self::ext:* or self::dotify:*">[tpb001] Unallowed namespace(s)</sch:assert>
        </sch:rule>
    </sch:pattern>

    <!-- Rule 3: Location of generator metadata -->
    <sch:pattern name="pef_TPB_3" id="pef_TPB_3">
        <sch:rule context="gen:*">
            <sch:assert test="parent::pef:meta">[tpb003] Generator metadata must be loacted in meta section</sch:assert>
        </sch:rule>
    </sch:pattern>

    <!-- Rule 4: Location of TPB extensions -->
    <sch:pattern name="pef_TPB_4" id="pef_TPB_4">
        <sch:rule context="ext:resource">
            <sch:assert test="parent::pef:volume">[tpb004] Parent to resource must be volume</sch:assert>
            <sch:assert test="self::ext:resource">[tpb004] Only resource element supported</sch:assert>
        </sch:rule>
        <sch:rule context="ext:*">
            <sch:assert test="parent::pef:meta">[tpb004] TPB metadata must be located in meta section</sch:assert>
        </sch:rule>
    </sch:pattern>

    <!-- Rule 5: No mix between simplex/duplex
         This rule has been added since CX isn't able to handle this.
    -->
    <sch:pattern name="pef_TPB_5" id="pef_TPB_5">
        <sch:rule context="pef:body">
            <sch:assert test="count(//pef:*[@duplex='true'])=0 or count(//pef:*[@duplex='false'])=0">[tpb005] Simplex and duplex must not occur in the same document</sch:assert>
        </sch:rule>
    </sch:pattern>

    <!-- Rule 6: Even number of pages in all sections (but the last) of a volume.
         This rule has been added since CX isn't able to handle sections with an odd number of pages (if duplex).
         Also, when adding resources to a document, this rule makes sure the resources are placed in between two sheets.
    -->
    <sch:pattern name="pef_TPB_6" id="pef_TPB_6">
        <sch:rule context="pef:section[following-sibling::pef:section and (ancestor-or-self::pef:*[@duplex])[1]/@duplex='true']">
            <sch:assert test="count(pef:page) mod 2=0">[tpb006] There must be an even number of pages in all sections (but the last) of a volume</sch:assert>
        </sch:rule>
    </sch:pattern>

    <!-- Rule 7: Even number of pages in the last section of every volume but the last (if duplex).
    <sch:pattern name="pef_TPB_7" id="pef_TPB_7">
      <sch:rule context="pef:section[not(following-sibling::pef:section) and (ancestor-or-self::pef:*[@duplex])[1]/@duplex='true' and following::pef:volume]">
        <sch:assert test="count(pef:page) mod 2=0">[tpb007] There must be an even number of pages in the last section of every volume but the last (if duplex).</sch:assert>
      </sch:rule>
    </sch:pattern>
    -->

    <!-- Rule 8: Resource attributes -->
    <sch:pattern name="pef_TPB_8" id="pef_TPB_8">
        <sch:rule context="ext:resource">
            <sch:assert test="@src">[tpb008] Resource must have a 'src' attribute</sch:assert>
            <sch:report test="count(@*)-count(@src)&gt;0">[tpb008] Only 'src' attribute allowed on resource element</sch:report>
        </sch:rule>
    </sch:pattern>

    <!-- Rule 10:
      Maximum number of sheets in a volume must be less than or equal to 60,
      else if meta data maximumSheets exists for book, maximum number of sheets in a volume will be set to this value instead.
    -->
    <sch:pattern name="pef_TPB_10" id="pef_TPB_10">
        <sch:rule context="pef:volume">
            <sch:assert test="(count(descendant::pef:section[ancestor-or-self::pef:*[@duplex][1][@duplex='false']]/descendant::pef:page)*2 + count(descendant::pef:section[ancestor-or-self::pef:*[@duplex][1][@duplex='true']]/descendant::pef:page) + count(descendant::pef:section[count(descendant::pef:page) mod 2 = 1][ancestor-or-self::pef:*[@duplex][1][@duplex='true']])) div 2 &lt;= ((/pef:pef/pef:head/pef:meta/ext:maximumSheets[1], 60))[1]">[tpb010] Maximum number of sheets in a volume must be less than or equal to 60, else if meta data maximumSheets exists for book, maximum number of sheets in a volume will be set to this value instead.</sch:assert>
        </sch:rule>
    </sch:pattern>

    <!-- Rule 11: Only one node maximumSheets allowed -->
    <sch:pattern name="pef_TPB_11" id="pef_TPB_11">
        <sch:rule context="ext:maximumSheets">
            <sch:assert test="parent::pef:meta and count(parent::*/ext:maximumSheets)=1">[tpb011] Only one node maximumSheets allowed</sch:assert>
        </sch:rule>
    </sch:pattern>

    <!-- Rule 12: The value in the node maximumSheets must be a number. -->
    <sch:pattern name="pef_TPB_12" id="pef_TPB_12">
        <sch:rule context="ext:maximumSheets">
            <sch:assert test="number(node())=node()">[tpb012] The value in the node maximumSheets must be a number.</sch:assert>
        </sch:rule>
    </sch:pattern>

    <!-- Rule 13: The value in the node maximumSheets must be greater than 60. -->
    <sch:pattern name="pef_TPB_13" id="pef_TPB_13">
        <sch:rule context="ext:maximumSheets">
            <sch:assert test="node()[1] &gt; 60">[tpb013] The value in the node maximumSheets must be greater than 60.</sch:assert>
        </sch:rule>
    </sch:pattern>

    <!-- Rule 14: The value in the node maximumSheets must be less than 70. -->
    <sch:pattern name="pef_TPB_14" id="pef_TPB_14">
        <sch:rule context="ext:maximumSheets">
            <sch:assert test="node()[1] &lt; 70">[tpb014] The value in the node maximumSheets must be less than 70.</sch:assert>
        </sch:rule>
    </sch:pattern>


    <!-- Rule 15: Location of Dotify metadata -->
    <sch:pattern name="pef_TPB_15" id="pef_TPB_15">
        <sch:rule context="dotify:*">
            <sch:assert test="parent::pef:meta">[tpb015] Dotify metadata must be loacted in meta section</sch:assert>
        </sch:rule>
    </sch:pattern>

</grammar>
